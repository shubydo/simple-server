name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION_FILE: ./go.mod # Use the latest patch version of Go defined in go.mod
  GOLANGCI_LINT_VERSION: v1.58.1

defaults:
  run:
    shell: bash

# Lint, run go tests, and build the binary
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper
          # list of changed files within `super-linter`
          fetch-depth: 0

      - name: Setup shared super-linter environment variables
        run: cat .github/super-linter.env >> "$GITHUB_ENV"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}

      # Run super-linter to lint all files except Go
      # Exclusions are defined in .github/super-linter.env
      - name: Run super-linter (EXCLUDING go)
        uses: github/super-linter/slim@v5
        continue-on-error: true
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Use golangci-lint to lint the Go code
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: "${{ env.GOLANGCI_LINT_VERSION }}"
          # only-new-issues: false

  # Check if unused dependencies are present using go mod tidy -v
  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}

      - name: Check go dependencies
        run: make tidy

      - name: Check if module was tidy
        run: |
          # Check if there are any changes to the go.mod and go.sum files
          if [[ -n "$(git status --porcelain go.mod go.sum)" ]]; then
            echo "go.mod and/or go.sum were not tidy. Please run 'go mod tidy -v' and commit the changes."
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}

      - name: Install Go dependencies
        run: make tidy

      # Run go tests and post coverage as a PR comment

      # Post coverage as a PR comment without codecov
      - name: Run go tests
        id: test
        run: |
          GO_TEST_RESULTS_FILE_PATH="$GITHUB_WORKSPACE/coverage.txt"
          go test -v -coverprofile="$GO_TEST_RESULTS_FILE_PATH" -covermode=atomic ./...

          # Store the path to the test results file as an output
          echo "GO_TEST_RESULTS_FILE_PATH=$GO_TEST_RESULTS_FILE_PATH" >> "$GITHUB_ENV"

      # - name: Test
      #   id: test
      #   run: make test

      # - name: Post comment
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       ## Test Results
      #       ${{ steps.test.outputs.stdout }}

      # Post coverage as a PR comment without codecov
      # - name: Publish test results as comment
      #   run: |
      #     go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      #     # Check if comment already exists
      #     if [[ -n "$(gh pr comment ${{ github.event.pull_request.number }} | grep "Coverage")" ]]; then
      #       echo "Coverage comment already exists. Deleting it..."
      #       gh pr comment ${{ github.event.pull_request.number }} --delete
      #     fi
      #     gh pr comment ${{ github.event.pull_request.number }} --body "$(cat coverage.txt)"

      # - name: Publish test results as comment
      #   uses: ./.github/actions/upsert-comment # uses an action in the repository
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     body: |
      #       ## Test Coverage
      #       | File | Coverage |
      #       | --- | --- |
      #       $(cat  ${{ test.outputs.GO_TEST_RESULTS_FILE_PATH }} | awk -F'[: ]' '{print "| " $1 " | " $3 " |"}' | sort)
      #     previous_body_includes: "## Test Coverage"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}

      # Build the binary
      - name: Build
        run: make build
