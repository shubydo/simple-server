name: Pull Request

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:
env:
  TERRAFORM_VERSION: "~>1.4.4"

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  contents: read # This is required for actions/checkout
  id-token: write # This is required for requesting the JWT
  pull-requests: write # This is required for actions/upsert-comment
  issues: write # This is required for actions/upsert-comment

# Run terraform plan and post comment to PR
jobs:
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      plan_output: ${{ steps.plan.outputs.plan_output }}
    # Set working directory to terraform directory
    defaults:
      run:
        working-directory: bootstrap
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Terraform ${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials from OIDC token
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::925719650235:role/gh-actions-shubydo-aws
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          terraform init  \
            -backend-config="bucket=shubatt-management-terraform-state" \
            -backend-config="dynamodb_table=shubatt-management-terraform-state-lock"

      - name: Terraform Plan
        id: plan
        run: |
          # set -euo pipefail
          terraform plan -out=tfplan
          # Save the plan output to a file

          PLAN_OUTPUT_FILE=$GITHUB_WORKSPACE/plan_output.txt
          terraform show tfplan > $PLAN_OUTPUT_FILE

          echo "plan_output=\$(cat $PLAN_OUTPUT_FILE)" >> $GITHUB_OUTPUT


          # Create output that shows the plan details for the PR comment
          # terraform show tfplan > tfplan.txt
          # echo "plan_output=$(cat tfplan.txt)" >> $GITHUB_OUTPUT
          # echo "plan_output=$(terraform show tfplan)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upsert Comment with terraform plan
        id: upsert_comment
        uses: ./.github/actions/upsert-comment
        # Always run this step, even if previous steps fail
        if: (always() && steps.plan.outcome == 'success')
        with:
          previous_body_includes: "Terraform Plan"
          body: |
            ### Terraform Plan (${{ github.sha }})
            **Updated:** ${{ github.event.pull_request.updated_at }}

            <details open>
              <summary>Expand to see plan</summary>  
                
                ```hcl
                  ${{ steps.plan.outputs.plan_output }}
                ```

            </details>
          token: ${{ secrets.GITHUB_TOKEN }}

      # # Post comment to PR if upsert_comment fails
      # - name: Upsert Comment with error message
      #   if: (always() && steps.plan.outcome != 'success')
      #   id: upsert_comment_failure
      #   uses: ./.github/actions/upsert-comment
      #   with:
      #     previous_body_includes: "Terraform Plan"
      #     body: |
      #       ### Terraform Plan (${{ github.sha }})
      #       **Updated:** ${{ github.event.pull_request.updated_at }}

      #       Something failed in the workflow. View the details [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).

      #     token: ${{ secrets.GITHUB_TOKEN }}
